
/*
|--------------------------------------------------------------------------
| Variables
|--------------------------------------------------------------------------
|
| description 
| description 
| description 
|
*/

$tunic-unit: 			16px 	!default;
$tunic-grid_gutter: 	16px 	!default;

/*
|--------------------------------------------------------------------------
| Font Face
|--------------------------------------------------------------------------
|
| @List [font-name file-path,]
|  
| Chains all you font face declataritons into one include.
|`
*/

@mixin tunic-fontface($lists...){
	@each $i in $lists{
		@font-face {
			font-family:#{nth($i,1)};
			src: url('#{nth($i,2)}.eot');
			src: url('#{nth($i,2)}.eot?#iefix') format('embedded-opentype'),
				 url('#{nth($i,2)}.woff') format('woff'),
				 url('#{nth($i,2)}.ttf') format('truetype'),
				 url('#{nth($i,2)}.svg##{nth($i,1)}') format('svg');
			font-weight:normal;
			font-style:normal;
		}
	}	
}


/*
|--------------------------------------------------------------------------
| Ellipsis
|--------------------------------------------------------------------------
|
*/

%tunic-ellipsis{
	overflow:hidden;
	text-overflow:ellipsis;
	white-space:nowrap;
}

@mixin tunic-ellipsis($cutoff:n){
	@extend	%tunic-ellipsis;
	@if $cutoff != n {
		padding-right:$cutoff; 		
	}	
}

/*
|--------------------------------------------------------------------------
| Size
|--------------------------------------------------------------------------
|
| One declaration for width and height 
|
*/

@mixin tunic-size($w, $h:null){
	@if $h != null {
		width:$w;
		height:$h;	
	}
	@else{
		width:$w;
		height:$w;
	}
}

/*
|--------------------------------------------------------------------------
| Flood
|--------------------------------------------------------------------------
|
| Absolutley position an element as far as it's containing elements bounds
|
*/

%tunic-flood{
	position: absolute;
	top:0;
	left:0;
	bottom:0;
	right:0;
}

/*
|--------------------------------------------------------------------------
| Columns
|--------------------------------------------------------------------------
|
| Uses borders to create columns. 
|
*/

@mixin tunic-columns($spacing:4px, $color:transparent){
	border-right:$spacing solid $color;
	border-left:$spacing solid $color;
	&:first-child{
		border-left:none;
	}
	&:last-child{
		border-right:none;
	}
}



/*
|--------------------------------------------------------------------------
| Clearfix
|--------------------------------------------------------------------------
|
*/

%tunic-clearfix{
	&:after{
		content: "";
		display: table;
		clear: both;
	}
}


/*
|--------------------------------------------------------------------------
| Box Model Extends
|--------------------------------------------------------------------------
|
*/


%_box-sizing{
	box-sizing:border-box;
}


/*
|--------------------------------------------------------------------------
| iOS Extends
|--------------------------------------------------------------------------
|
|
*/

%_ios-highlight{
	-webkit-tap-highlight-color: rgba(0,0,0,0);
}

%_ios-scroll{
	-webkit-overflow-scrolling:touch;
}


/*
|--------------------------------------------------------------------------
| Behaviours
|--------------------------------------------------------------------------
|
| Change the default behaviour of an element.
|
*/

%tunic-behave--notselectable{
	-webkit-touch-callout: none;  
	user-select: none;
}

%tunic-behave--button{
	@extend %tunic-behave--notselectable; 
	cursor:pointer;
}


/*
|--------------------------------------------------------------------------
| Browser Performance Hacks
|--------------------------------------------------------------------------
|
*/

%_hak-hardware{
	transform: translateZ(0);
	backface-visibility: hidden;
	perspective: 1000;
}


/*
|--------------------------------------------------------------------------
| Breakpoints
|--------------------------------------------------------------------------
|
| Returns a media query based on the content of $bp.
| 
| $bp: number;				@media only screen and (min-width: number)
| $bp: string number;		@media only screen and (string: number)
| $bp: number number;		@media only screen and (min-width: number) and (max-width: number)
*/

@mixin tunic-breakpoint($bp) {
	// Standard 
	@if type-of($bp) == 'number'{
		@media only screen and (max-width: #{$bp})  { 
			@content; 
		}
	}

	@if type-of($bp) == 'list'{
		$first:  nth($bp,1);
		$second: nth($bp,2);

		@if type-of($first) == 'string'{
			@media only screen and (#{$first}: #{$second}) { 
				@content; 
			}
		}
		@elseif type-of($first) == 'number'{
			@media only screen and (min-width: #{$first}) and (max-width: #{$second}) { 
				@content; 
			}
		}
		@else{
			@warn 'tunic-breakpoint: wrong syntax';
		}
	}
}

@mixin tunic-retina($dpi:2){
	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dppx) { 
		@content;
	}
}

/*
|--------------------------------------------------------------------------
| Opacity
|--------------------------------------------------------------------------
|
*/

@mixin tunic-opacity($val:0.5, $color:'null'){
	
	@if $color == 'null'{
		$ie: $val * 100;
		opacity:$val;
		filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$ie})";
	}
	@else{
		$color:rgba($color,$val);
		$ie: ie-hex-str($color);

		filter:"progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie}, endColorstr=#{$ie})";
		background-color: $color;
	}
	
	
	
}


/*
|--------------------------------------------------------------------------
| Arrows
|--------------------------------------------------------------------------
|
*/

%tunic-arrow{
	display: block;
	content:"";
	width:0;
	height:0;
	border-color: transparent;
}

@mixin tunic-arrow($width,$direction,$color){
	@extend %tunic-arrow; 
	border:$width solid $color;	
	border-#{$direction}-color:$color;
}


/*
|--------------------------------------------------------------------------
| Functions
|--------------------------------------------------------------------------
|
| Useful functions for to save dev from tearing their hair out.
|
*/

@function repeatChar($char, $ammount){
	$a: $char;
	@for $i from 0 through $ammount{		
		$a: $a + $char;
	}
	@return $a;
}

// Invert Color
@function inverse($var){
	@return $var *-1;
}

// Returns a grey value from 0 - 100
@function grey($var:50){
	@return hsl(0,0,$var);
}

// Lightens and desaturates a color
@function pastel($var, $des:10, $light:10){
	@return lighten(desaturate($var,$des),$light);
}

// Time. Returns $var+'ms'
@function t($var){
	@return #{$var}ms;
}

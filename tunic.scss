
/*======\                      __              	
|        \                    |  \          		
 \$$$$$$$$|=\   |=\ |======\   \$$  /=====\ 	
   | $$   |  \  |  \|       \ |  \ /       \	
   | $$   | $$  | $$| $$$$$$$\| $$|  $$$$$$$		
   | $$   | $$  | $$| $$  | $$| $$| $$      		
   | $$   | $$==/ $$| $$  | $$| $$| $$====\ 		
   | $$    \$$    $$| $$  | $$| $$ \$$     \	
    \$$     \$$$$$$  \$$   \$$ \$$  \$$$$$*/ 


/*
|--------------------------------------------------------------------------
| Breakpoints
|--------------------------------------------------------------------------
|
| Returns a media query based on the content of $bp.
| 
| $bp: number;				@media only screen and (max-width: number)
| $bp: string number;		@media only screen and (string: number)
| $bp: number number;		@media only screen and (min-width: number) and (max-width: number)
*/

@mixin tunic-breakpoint($bp) {
	// Standard 
	@if type-of($bp) == 'number'{
		@media only screen and (max-width: #{$bp})  { 
			@content; 
		}
	}

	@if type-of($bp) == 'list'{
		$first:  nth($bp,1);
		$second: nth($bp,2);

		@if type-of($first) == 'string'{
			@media only screen and (#{$first}: #{$second}) { 
				@content; 
			}
		}
		@elseif type-of($first) == 'number'{
			@media only screen and (min-width: #{$first}) and (max-width: #{$second}) { 
				@content; 
			}
		}
		@else{
			@warn 'tunic-breakpoint: wrong syntax';
		}
	}
}

/*
|--------------------------------------------------------------------------
| Retina Breakpoint
|--------------------------------------------------------------------------
|
| $dpi
|
*/

@mixin tunic-retina($dpi:2){
	@media (-webkit-min-device-pixel-ratio: #{$dpi}), (min-resolution: 192dppx) { 
		@content;
	}
}

/*
|--------------------------------------------------------------------------
| Variables
|--------------------------------------------------------------------------
|
*/

$tunic-unit: 			16px 	!default;
$tunic-grid_gutter: 	16px 	!default;



$tunic-breakpoint--small: 	21em 	!default;


/*
|--------------------------------------------------------------------------
| Reset
|--------------------------------------------------------------------------
|
| http://meyerweb.com/eric/tools/css/reset/ 
| v2.0 | 20110126
| License: none (public domain)
|
*/

@mixin tunic-reset(){
	html, body, div, span, applet, object, iframe,
	h1, h2, h3, h4, h5, h6, p, blockquote, pre,
	a, abbr, acronym, address, big, cite, code,
	del, dfn, em, img, ins, kbd, q, s, samp,
	small, strike, strong, sub, sup, tt, var,
	b, u, i, center,
	dl, dt, dd, ol, ul, li,
	fieldset, form, label, legend,
	table, caption, tbody, tfoot, thead, tr, th, td,
	article, aside, canvas, details, embed, 
	figure, figcaption, footer, header, hgroup, 
	menu, nav, output, ruby, section, summary,
	time, mark, audio, video {
		margin: 0;
		padding: 0;
		border: 0;
		font-size: 100%;
		font: inherit;
		vertical-align: baseline;
	}
	/* HTML5 display-role reset for older browsers */
	article, aside, details, figcaption, figure, 
	footer, header, hgroup, menu, nav, section {
		display: block;
	}
	body {
		line-height: 1;
	}
	ol, ul {
		list-style: none;
	}
	blockquote, q {
		quotes: none;
	}
	blockquote:before, blockquote:after,
	q:before, q:after {
		content: '';
		content: none;
	}
	table {
		border-collapse: collapse;
		border-spacing: 0;
	}
}




/*
|--------------------------------------------------------------------------
| Size
|--------------------------------------------------------------------------
|
| One declaration for width and height 
|
*/

@mixin tunic-size($w, $h:null){
	@if $h != null {
		width:$w;
		height:$h;	
	}
	@else{
		width:$w;
		height:$w;
	}
}

/*
|--------------------------------------------------------------------------
| Flood
|--------------------------------------------------------------------------
|
| Absolutley position an element as far as it's containing elements bounds
|
*/

%tunic-flood{
	position: absolute;
	top:0;
	left:0;
	bottom:0;
	right:0;
}

@mixin tunic-flood(){
	@extend %tunic-flood;
}

/*
|--------------------------------------------------------------------------
| Columns
|--------------------------------------------------------------------------
|
| Uses borders to create columns. 
|
*/

@mixin tunic-columns($spacing:4px, $color:transparent){
	border-right:$spacing solid $color;
	border-left:$spacing solid $color;
	&:first-child{
		border-left:none;
	}
	&:last-child{
		border-right:none;
	}
}



/*
|--------------------------------------------------------------------------
| Clearfix
|--------------------------------------------------------------------------
|
*/

%tunic-clearfix{
	&:after{
		content: "";
		display: table;
		clear: both;
	}
}

@mixin tunic-clearfix{
	@extend %tunic-clearfix; 
}

/*
|--------------------------------------------------------------------------
| iOS Extends
|--------------------------------------------------------------------------
|
|
*/

%tunic-ios--nohighlight{
	-webkit-tap-highlight-color: rgba(0,0,0,0);
}

%tunic-ios--scroll{
	-webkit-overflow-scrolling:touch;
}

@mixin tunic-ios($type){
	@extend %tunic-ios--#{$type};
};



/*
|--------------------------------------------------------------------------
| Behaviours
|--------------------------------------------------------------------------
|
| Change the default behaviour of an element.
|
*/

%tunic-behave--notselectable{
	-webkit-touch-callout: none;  
	user-select: none;
}

%tunic-behave--button{
	@extend %tunic-behave--notselectable; 
	cursor:pointer;
}

@mixin tunic-behave($type){
	@extend %tunic-behave--#{$type};
};




/*
|--------------------------------------------------------------------------
| Browser Performance Hacks
|--------------------------------------------------------------------------
|
*/

%tunic-hack--hardware{
	transform: translateZ(0);
	backface-visibility: hidden;
	perspective: 1000;
}


/*
|--------------------------------------------------------------------------
| Breakpoints
|--------------------------------------------------------------------------
|
| Returns a media query based on the content of $bp.
| 
| $bp: number;				@media only screen and (min-width: number)
| $bp: string number;		@media only screen and (string: number)
| $bp: number number;		@media only screen and (min-width: number) and (max-width: number)
*/

@mixin tunic-breakpoint($bp) {
	// Standard 
	@if $tunic-ie == true {
		@content;
	}
	@else{
		@if type-of($bp) == 'number'{
			@media only screen and (min-width: #{$bp})  { 
				@content; 
			}
		}

		@if type-of($bp) == 'list'{
			$first:  nth($bp,1);
			$second: nth($bp,2);

			@if type-of($first) == 'string'{
				@media only screen and (#{$first}: #{$second}) { 
					@content; 
				}
			}
			@elseif type-of($first) == 'number'{
				@media only screen and (min-width: #{$first}) and (max-width: #{$second}) { 
					@content; 
				}
			}
			@else{
				@warn 'tunic-breakpoint: wrong syntax';
			}
		}
	}
	
}

@mixin tunic-retina($dpi:2){
	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dppx) { 
		@content;
	}
}


/*
|--------------------------------------------------------------------------
| Opacity
|--------------------------------------------------------------------------
| 
| Opacity mixin for older browsers.
|
*/

@mixin tunic-opacity($val:0.5, $color:'null'){

	@if $color == 'null'{
		$ie: $val * 100;
		opacity:$val;
		filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$ie})";
	}
	@else{
		$color:rgba($color,$val);
		$ie: ie-hex-str($color);

		filter:"progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie}, endColorstr=#{$ie})";
		background-color: $color;
	}	
	
}


/*
|--------------------------------------------------------------------------
| Arrows
|--------------------------------------------------------------------------
|
*/

%tunic-arrow{
	display: block;
	content:"";
	width:0;
	height:0;
}

@mixin tunic-arrow($width,$direction,$color){
	@extend %tunic-arrow; 
	border:$width solid transparent;	
	border-#{$direction}-color:$color;
}



/*
|--------------------------------------------------------------------------
| Functions
|--------------------------------------------------------------------------
|
| Useful functions for to save dev from tearing their hair out.
|
*/

@function repeatChar($char, $ammount){
	$a: $char;
	@for $i from 0 through $ammount{		
		$a: $a + $char;
	}
	@return $a;
}

// Invert Color
@function inverse($var){
	@return $var *-1;
}

// Returns a grey value from 0 - 100
@function grey($var:50){
	@return hsl(0,0,$var);
}

// Lightens and desaturates a color
@function pastel($var, $des:10, $light:10){
	@return lighten(desaturate($var,$des),$light);
}

// Time. Returns $var+'ms'
@function t($var){
	@return #{$var}ms;
}

// List functions
@function first($list) {
  @return nth($list, 1);
}

@function last($list) {
  @return nth($list, length($list));
}

@function z($name){
	@return map-get($tunic-zindexList, $name);
}


/*
|--------------------------------------------------------------------------
| Boxsizing
|--------------------------------------------------------------------------
|
*/

%tunic-boxsizing{
	box-sizing:border-box;
}

@mixin tunic-boxsizing(){
	@extend %tunic-boxsizing;
}


/*
|--------------------------------------------------------------------------
| Wrappers
|--------------------------------------------------------------------------
|
| Page width an auto margins. Stock standard rappin'.
|
*/

@mixin tunic-wrapper($width:1024px){
	width:$width;
	margin:0 auto;
}


/*
|--------------------------------------------------------------------------
| Grid
|--------------------------------------------------------------------------
|
*/

@mixin tunic-grid($grid:'Grid', $col:'Col-', $num:12){
	.#{$grid}{
		$gutter: $tunic-grid_gutter;
		@extend %tunic-boxsizing;
		display:table;
		width:100%;
		table-layout: fixed;

		& > [class*=#{$col}] {
			@extend %tunic-boxsizing;
			display:block;
			vertical-align: top;

			@include tunic-breakpoint($tunic-breakpoint--small){
				display:table-cell;
				border-right: $gutter solid transparent;
				border-left: $gutter solid transparent;
			}
			
			&:first-child{
				border-left:none;
			}
			&:last-child{
				border-right:none;
			}
		}

		// Alignment
		&.is-middle{
			& > [class*=#{$col}] {
				vertical-align: middle;
			}
		}
		&.is-bottom{
			& > [class*=#{$col}] {
				vertical-align: bottom;
			}
		}

		// Sizing
		&.is-tight{
			& > [class*=#{$col}] {
				border-width:$gutter / 2;
			}
		}
	}

	@for $i from 1 through $num{
		@include tunic-breakpoint($tunic-breakpoint--small){
			.#{$col}#{$i}{
				width:(100% / $num) * $i;
			}
		}
		
	}	
}



/*
|--------------------------------------------------------------------------
| Widths
|--------------------------------------------------------------------------
|
| Force an element to a percentage width;
|
*/

@mixin tunic-widths($sizes:(0,1,2,3,4,5,6,7,8,9,10)){
	@for $i from first($sizes) through last($sizes){
		@if $i == 0{
			.l-#{$i}0{	width:1%}
		}
		.l-#{$i}0{	width:percentage($i)/10   !important; }
		@if $i != 10{
			.l-#{$i}5{	width:percentage($i)/10+5 !important; }
		}
		
	}
}

/*
|--------------------------------------------------------------------------
| Vertical Align
|--------------------------------------------------------------------------
|
*/

%l-verticalAlign{
	display:table;
	height:100%;
	width:100%;
}

%l-verticalAlign_inner{
	display:table-cell;
	vertical-align:middle;
}

@mixin tunic-verticalAlign($wrapper:'l-verticalAlign', $inner:'l-verticalAlign_inner'){
	.#{$wrapper}{
		@extend %l-verticalAlign;
	}

	.#{$inner}{
		@extend %l-verticalAlign_inner;
	}
}





/*
|--------------------------------------------------------------------------
| Font Face
|--------------------------------------------------------------------------
|
| @List [font-name file-path,]
|  
| Chains all you font face declataritons into one include.
|
*/

@mixin tunic-fontface($lists...){
	@each $i in $lists{
		@font-face {
			font-family:#{nth($i,1)};
			src: url('#{nth($i,2)}.eot');
			src: url('#{nth($i,2)}.eot?#iefix') format('embedded-opentype'),
				 url('#{nth($i,2)}.woff') format('woff'),
				 url('#{nth($i,2)}.ttf') format('truetype'),
				 url('#{nth($i,2)}.svg##{nth($i,1)}') format('svg');
			font-weight:normal;
			font-style:normal;
		}
	}	
}


/*
|--------------------------------------------------------------------------
| Link Hover
|--------------------------------------------------------------------------
|
| lighten color on hover.
|
*/

@mixin tunic-hover($color, $amount:10){
	color:$color;
	&:hover{
		color:lighten($color,$amount);
	}
}


/*
|--------------------------------------------------------------------------
| Ellipsis
|--------------------------------------------------------------------------
|
*/

%tunic-ellipsis{
	overflow:hidden;
	text-overflow:ellipsis;
	white-space:nowrap;
}

@mixin tunic-ellipsis($cutoff:null){
	@extend	%tunic-ellipsis;
	@if $cutoff != null {
		padding-right:$cutoff; 		
	}	
}